-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CFOCddfs is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    i_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    i_data_TVALID : IN STD_LOGIC;
    i_data_TREADY : OUT STD_LOGIC;
    i_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    o_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    o_data_TVALID : OUT STD_LOGIC;
    o_data_TREADY : IN STD_LOGIC;
    o_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    FCW_V : IN STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of CFOCddfs is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CFOCddfs,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k410tffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.950000,HLS_SYN_LAT=7,HLS_SYN_TPT=1,HLS_SYN_MEM=3,HLS_SYN_DSP=4,HLS_SYN_FF=728,HLS_SYN_LUT=554}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal o_data_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_V_data_V_1_vld_in : STD_LOGIC;
    signal o_data_V_data_V_1_vld_out : STD_LOGIC;
    signal o_data_V_data_V_1_ack_in : STD_LOGIC;
    signal o_data_V_data_V_1_ack_out : STD_LOGIC;
    signal o_data_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal o_data_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal o_data_V_data_V_1_sel : STD_LOGIC;
    signal o_data_V_data_V_1_load_A : STD_LOGIC;
    signal o_data_V_data_V_1_load_B : STD_LOGIC;
    signal o_data_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal o_data_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal o_data_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_V_last_V_1_vld_in : STD_LOGIC;
    signal o_data_V_last_V_1_vld_out : STD_LOGIC;
    signal o_data_V_last_V_1_ack_in : STD_LOGIC;
    signal o_data_V_last_V_1_ack_out : STD_LOGIC;
    signal o_data_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal o_data_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal o_data_V_last_V_1_sel : STD_LOGIC;
    signal o_data_V_last_V_1_load_A : STD_LOGIC;
    signal o_data_V_last_V_1_load_B : STD_LOGIC;
    signal o_data_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal o_data_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal acc_out_V : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal quarter_sin_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal quarter_sin_V_ce0 : STD_LOGIC;
    signal quarter_sin_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal quarter_sin_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal quarter_sin_V_ce1 : STD_LOGIC;
    signal quarter_sin_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sin_out_V : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal cos_out_V : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal i_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_nbreadreq_fu_100_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal tmp_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter6_tmp_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_last_V_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_last_V_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_last_V_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_last_V_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_last_V_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_419 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_pp0_iter1_p_Result_s_reg_419 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_pp0_iter2_p_Result_s_reg_419 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_pp0_iter3_p_Result_s_reg_419 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_1_reg_424 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_pp0_iter1_p_Result_1_reg_424 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_pp0_iter2_p_Result_1_reg_424 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_pp0_iter3_p_Result_1_reg_424 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_179_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_7_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_7_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_7_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_7_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_7_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_434 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter1_p_Result_3_reg_434 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter2_p_Result_3_reg_434 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_4_reg_438 : STD_LOGIC_VECTOR (11 downto 0);
    signal quarter_sin_V_load_reg_454 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal quarter_sin_V_load_1_reg_462 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_337_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_4_fu_341_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_4_reg_476 : STD_LOGIC_VECTOR (27 downto 0);
    signal sin_out_V_load_reg_482 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_5_fu_348_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_5_reg_487 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_5_reg_493 : STD_LOGIC_VECTOR (27 downto 0);
    signal lhs_V_1_fu_351_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_7_reg_504 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_s_25_fu_372_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_9_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_191_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_4_fu_240_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_2_fu_264_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_291_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_315_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_252_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_3_fu_279_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_1_fu_303_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_324_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_5_fu_187_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_227_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_3_fu_237_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_1_fu_261_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_2_fu_276_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_fu_300_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_396_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_403_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_5_fu_354_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_6_fu_363_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_384_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_390_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_403_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_403_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_384_ce : STD_LOGIC;
    signal grp_fu_390_ce : STD_LOGIC;
    signal grp_fu_396_ce : STD_LOGIC;
    signal grp_fu_403_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_540 : BOOLEAN;

    component CFOCddfs_mul_mul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component CFOCddfs_mac_muladEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component CFOCddfs_mac_mulseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component CFOCddfs_quarter_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    quarter_sin_V_U : component CFOCddfs_quarter_bkb
    generic map (
        DataWidth => 12,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => quarter_sin_V_address0,
        ce0 => quarter_sin_V_ce0,
        q0 => quarter_sin_V_q0,
        address1 => quarter_sin_V_address1,
        ce1 => quarter_sin_V_ce1,
        q1 => quarter_sin_V_q1);

    CFOCddfs_mul_mul_cud_U1 : component CFOCddfs_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 15,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_384_p0,
        din1 => ap_reg_pp0_iter3_p_Result_s_reg_419,
        ce => grp_fu_384_ce,
        dout => grp_fu_384_p2);

    CFOCddfs_mul_mul_cud_U2 : component CFOCddfs_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 15,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_390_p0,
        din1 => ap_reg_pp0_iter3_p_Result_1_reg_424,
        ce => grp_fu_390_ce,
        dout => grp_fu_390_p2);

    CFOCddfs_mac_muladEe_U3 : component CFOCddfs_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 15,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_396_p0,
        din1 => grp_fu_396_p1,
        din2 => r_V_5_reg_493,
        ce => grp_fu_396_ce,
        dout => grp_fu_396_p3);

    CFOCddfs_mac_mulseOg_U4 : component CFOCddfs_mac_mulseOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 15,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_403_p0,
        din1 => grp_fu_403_p1,
        din2 => r_V_7_reg_504,
        ce => grp_fu_403_ce,
        dout => grp_fu_403_p3);





    acc_out_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                acc_out_V <= ap_const_lv40_0;
            else
                if (((tmp_nbreadreq_fu_100_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    acc_out_V <= p_Val2_1_fu_191_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    cos_out_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                cos_out_V <= ap_const_lv13_0;
            else
                if ((ap_const_boolean_1 = ap_condition_540)) then
                    if ((ap_reg_pp0_iter2_p_Result_3_reg_434 = ap_const_lv2_0)) then 
                        cos_out_V <= tmp_1_fu_324_p1;
                    elsif ((ap_reg_pp0_iter2_p_Result_3_reg_434 = ap_const_lv2_1)) then 
                        cos_out_V <= r_V_1_fu_303_p2;
                    elsif ((ap_reg_pp0_iter2_p_Result_3_reg_434 = ap_const_lv2_2)) then 
                        cos_out_V <= r_V_3_fu_279_p2;
                    elsif ((ap_reg_pp0_iter2_p_Result_3_reg_434 = ap_const_lv2_3)) then 
                        cos_out_V <= tmp_3_fu_252_p1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    o_data_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((o_data_V_data_V_1_ack_out = ap_const_logic_1) and (o_data_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        o_data_V_data_V_1_sel_rd <= not(o_data_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((o_data_V_data_V_1_ack_in = ap_const_logic_1) and (o_data_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        o_data_V_data_V_1_sel_wr <= not(o_data_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((o_data_V_data_V_1_state = ap_const_lv2_2) and (o_data_V_data_V_1_vld_in = ap_const_logic_0)) or ((o_data_V_data_V_1_state = ap_const_lv2_3) and (o_data_V_data_V_1_vld_in = ap_const_logic_0) and (o_data_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    o_data_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((o_data_V_data_V_1_state = ap_const_lv2_1) and (o_data_V_data_V_1_ack_out = ap_const_logic_0)) or ((o_data_V_data_V_1_state = ap_const_lv2_3) and (o_data_V_data_V_1_ack_out = ap_const_logic_0) and (o_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    o_data_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((o_data_V_data_V_1_vld_in = ap_const_logic_0) and (o_data_V_data_V_1_ack_out = ap_const_logic_1))) and not(((o_data_V_data_V_1_ack_out = ap_const_logic_0) and (o_data_V_data_V_1_vld_in = ap_const_logic_1))) and (o_data_V_data_V_1_state = ap_const_lv2_3)) or ((o_data_V_data_V_1_state = ap_const_lv2_1) and (o_data_V_data_V_1_ack_out = ap_const_logic_1)) or ((o_data_V_data_V_1_state = ap_const_lv2_2) and (o_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    o_data_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    o_data_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    o_data_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((o_data_V_last_V_1_ack_out = ap_const_logic_1) and (o_data_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        o_data_V_last_V_1_sel_rd <= not(o_data_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((o_data_V_last_V_1_ack_in = ap_const_logic_1) and (o_data_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        o_data_V_last_V_1_sel_wr <= not(o_data_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((o_data_V_last_V_1_state = ap_const_lv2_2) and (o_data_V_last_V_1_vld_in = ap_const_logic_0)) or ((o_data_V_last_V_1_state = ap_const_lv2_3) and (o_data_V_last_V_1_vld_in = ap_const_logic_0) and (o_data_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    o_data_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((o_data_V_last_V_1_state = ap_const_lv2_3) and (o_data_V_last_V_1_ack_out = ap_const_logic_0) and (o_data_V_last_V_1_vld_in = ap_const_logic_1)) or ((o_data_V_last_V_1_state = ap_const_lv2_1) and (o_data_V_last_V_1_ack_out = ap_const_logic_0)))) then 
                    o_data_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((o_data_V_last_V_1_state = ap_const_lv2_2) and (o_data_V_last_V_1_vld_in = ap_const_logic_1)) or (not(((o_data_V_last_V_1_vld_in = ap_const_logic_0) and (o_data_V_last_V_1_ack_out = ap_const_logic_1))) and not(((o_data_V_last_V_1_ack_out = ap_const_logic_0) and (o_data_V_last_V_1_vld_in = ap_const_logic_1))) and (o_data_V_last_V_1_state = ap_const_lv2_3)) or ((o_data_V_last_V_1_state = ap_const_lv2_1) and (o_data_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    o_data_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    o_data_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sin_out_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_out_V <= ap_const_lv13_0;
            else
                if ((ap_const_boolean_1 = ap_condition_540)) then
                    if ((ap_reg_pp0_iter2_p_Result_3_reg_434 = ap_const_lv2_0)) then 
                        sin_out_V <= tmp_6_fu_315_p1;
                    elsif ((ap_reg_pp0_iter2_p_Result_3_reg_434 = ap_const_lv2_1)) then 
                        sin_out_V <= tmp_2_fu_291_p1;
                    elsif ((ap_reg_pp0_iter2_p_Result_3_reg_434 = ap_const_lv2_2)) then 
                        sin_out_V <= r_V_2_fu_264_p2;
                    elsif ((ap_reg_pp0_iter2_p_Result_3_reg_434 = ap_const_lv2_3)) then 
                        sin_out_V <= r_V_4_fu_240_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_p_Result_1_reg_424 <= p_Result_1_reg_424;
                ap_reg_pp0_iter1_p_Result_3_reg_434 <= p_Result_3_reg_434;
                ap_reg_pp0_iter1_p_Result_s_reg_419 <= p_Result_s_reg_419;
                ap_reg_pp0_iter1_tmp_7_reg_429 <= tmp_7_reg_429;
                ap_reg_pp0_iter1_tmp_last_V_reg_414 <= tmp_last_V_reg_414;
                ap_reg_pp0_iter1_tmp_reg_410 <= tmp_reg_410;
                tmp_reg_410 <= tmp_nbreadreq_fu_100_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_p_Result_1_reg_424 <= ap_reg_pp0_iter1_p_Result_1_reg_424;
                ap_reg_pp0_iter2_p_Result_3_reg_434 <= ap_reg_pp0_iter1_p_Result_3_reg_434;
                ap_reg_pp0_iter2_p_Result_s_reg_419 <= ap_reg_pp0_iter1_p_Result_s_reg_419;
                ap_reg_pp0_iter2_tmp_7_reg_429 <= ap_reg_pp0_iter1_tmp_7_reg_429;
                ap_reg_pp0_iter2_tmp_last_V_reg_414 <= ap_reg_pp0_iter1_tmp_last_V_reg_414;
                ap_reg_pp0_iter2_tmp_reg_410 <= ap_reg_pp0_iter1_tmp_reg_410;
                ap_reg_pp0_iter3_p_Result_1_reg_424 <= ap_reg_pp0_iter2_p_Result_1_reg_424;
                ap_reg_pp0_iter3_p_Result_s_reg_419 <= ap_reg_pp0_iter2_p_Result_s_reg_419;
                ap_reg_pp0_iter3_tmp_7_reg_429 <= ap_reg_pp0_iter2_tmp_7_reg_429;
                ap_reg_pp0_iter3_tmp_last_V_reg_414 <= ap_reg_pp0_iter2_tmp_last_V_reg_414;
                ap_reg_pp0_iter3_tmp_reg_410 <= ap_reg_pp0_iter2_tmp_reg_410;
                ap_reg_pp0_iter4_tmp_7_reg_429 <= ap_reg_pp0_iter3_tmp_7_reg_429;
                ap_reg_pp0_iter4_tmp_last_V_reg_414 <= ap_reg_pp0_iter3_tmp_last_V_reg_414;
                ap_reg_pp0_iter4_tmp_reg_410 <= ap_reg_pp0_iter3_tmp_reg_410;
                ap_reg_pp0_iter5_tmp_7_reg_429 <= ap_reg_pp0_iter4_tmp_7_reg_429;
                ap_reg_pp0_iter5_tmp_last_V_reg_414 <= ap_reg_pp0_iter4_tmp_last_V_reg_414;
                ap_reg_pp0_iter5_tmp_reg_410 <= ap_reg_pp0_iter4_tmp_reg_410;
                ap_reg_pp0_iter6_tmp_reg_410 <= ap_reg_pp0_iter5_tmp_reg_410;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((o_data_V_data_V_1_load_A = ap_const_logic_1)) then
                o_data_V_data_V_1_payload_A <= p_Result_s_25_fu_372_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((o_data_V_data_V_1_load_B = ap_const_logic_1)) then
                o_data_V_data_V_1_payload_B <= p_Result_s_25_fu_372_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((o_data_V_last_V_1_load_A = ap_const_logic_1)) then
                o_data_V_last_V_1_payload_A <= ap_reg_pp0_iter5_tmp_last_V_reg_414;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((o_data_V_last_V_1_load_B = ap_const_logic_1)) then
                o_data_V_last_V_1_payload_B <= ap_reg_pp0_iter5_tmp_last_V_reg_414;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_100_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_1_reg_424 <= i_data_TDATA(15 downto 1);
                p_Result_3_reg_434 <= p_Val2_1_fu_191_p2(39 downto 38);
                p_Result_4_reg_438 <= p_Val2_1_fu_191_p2(37 downto 26);
                p_Result_s_reg_419 <= i_data_TDATA(31 downto 17);
                tmp_7_reg_429 <= tmp_7_fu_179_p1;
                tmp_last_V_reg_414 <= i_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_tmp_reg_410 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                quarter_sin_V_load_1_reg_462 <= quarter_sin_V_q1;
                quarter_sin_V_load_reg_454 <= quarter_sin_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter4_tmp_reg_410 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_5_reg_493 <= grp_fu_384_p2;
                r_V_7_reg_504 <= grp_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_tmp_reg_410 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                rhs_V_4_reg_476 <= rhs_V_4_fu_341_p1;
                rhs_V_5_reg_487 <= rhs_V_5_fu_348_p1;
                sin_out_V_load_reg_482 <= sin_out_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(i_data_TVALID, o_data_V_data_V_1_ack_in, o_data_V_last_V_1_ack_in, tmp_nbreadreq_fu_100_p4, ap_enable_reg_pp0_iter7)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((o_data_V_last_V_1_ack_in = ap_const_logic_0) or (o_data_V_data_V_1_ack_in = ap_const_logic_0))) or ((tmp_nbreadreq_fu_100_p4 = ap_const_lv1_1) and (i_data_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(i_data_TVALID, o_data_V_data_V_1_ack_in, o_data_V_last_V_1_ack_in, tmp_nbreadreq_fu_100_p4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_block_state7_io, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or (o_data_V_last_V_1_ack_in = ap_const_logic_0) or (o_data_V_data_V_1_ack_in = ap_const_logic_0))) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_nbreadreq_fu_100_p4 = ap_const_lv1_1) and (i_data_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(i_data_TVALID, o_data_V_data_V_1_ack_in, o_data_V_last_V_1_ack_in, tmp_nbreadreq_fu_100_p4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_block_state7_io, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or (o_data_V_last_V_1_ack_in = ap_const_logic_0) or (o_data_V_data_V_1_ack_in = ap_const_logic_0))) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_nbreadreq_fu_100_p4 = ap_const_lv1_1) and (i_data_TVALID = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(i_data_TVALID, tmp_nbreadreq_fu_100_p4)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((tmp_nbreadreq_fu_100_p4 = ap_const_lv1_1) and (i_data_TVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(o_data_V_data_V_1_ack_in, ap_reg_pp0_iter5_tmp_reg_410)
    begin
                ap_block_state7_io <= ((ap_reg_pp0_iter5_tmp_reg_410 = ap_const_lv1_1) and (o_data_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(o_data_V_data_V_1_ack_in, ap_reg_pp0_iter6_tmp_reg_410)
    begin
                ap_block_state8_io <= ((ap_reg_pp0_iter6_tmp_reg_410 = ap_const_lv1_1) and (o_data_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage0_iter7_assign_proc : process(o_data_V_data_V_1_ack_in, o_data_V_last_V_1_ack_in)
    begin
                ap_block_state8_pp0_stage0_iter7 <= ((o_data_V_last_V_1_ack_in = ap_const_logic_0) or (o_data_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_540_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter2_tmp_reg_410, ap_enable_reg_pp0_iter3)
    begin
                ap_condition_540 <= ((ap_reg_pp0_iter2_tmp_reg_410 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_384_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_384_ce <= ap_const_logic_1;
        else 
            grp_fu_384_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_384_p0 <= lhs_V_fu_337_p1(13 - 1 downto 0);

    grp_fu_390_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_390_ce <= ap_const_logic_1;
        else 
            grp_fu_390_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_390_p0 <= lhs_V_fu_337_p1(13 - 1 downto 0);

    grp_fu_396_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_396_ce <= ap_const_logic_1;
        else 
            grp_fu_396_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_396_p0 <= lhs_V_1_fu_351_p1(13 - 1 downto 0);
    grp_fu_396_p1 <= rhs_V_5_reg_487(15 - 1 downto 0);

    grp_fu_403_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_403_ce <= ap_const_logic_1;
        else 
            grp_fu_403_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_403_p0 <= lhs_V_1_fu_351_p1(13 - 1 downto 0);
    grp_fu_403_p1 <= rhs_V_4_reg_476(15 - 1 downto 0);

    i_data_TDATA_blk_n_assign_proc : process(i_data_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_nbreadreq_fu_100_p4)
    begin
        if (((tmp_nbreadreq_fu_100_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            i_data_TDATA_blk_n <= i_data_TVALID;
        else 
            i_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_data_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_100_p4, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_100_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_data_TREADY <= ap_const_logic_1;
        else 
            i_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sin_out_V_load_reg_482),28));

        lhs_V_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_out_V),28));

    o_data_TDATA <= o_data_V_data_V_1_data_out;

    o_data_TDATA_blk_n_assign_proc : process(o_data_V_data_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_tmp_reg_410, ap_enable_reg_pp0_iter7, ap_reg_pp0_iter6_tmp_reg_410)
    begin
        if ((((ap_reg_pp0_iter6_tmp_reg_410 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_reg_pp0_iter5_tmp_reg_410 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            o_data_TDATA_blk_n <= o_data_V_data_V_1_state(1);
        else 
            o_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_data_TLAST <= o_data_V_last_V_1_data_out;
    o_data_TVALID <= o_data_V_last_V_1_state(0);
    o_data_V_data_V_1_ack_in <= o_data_V_data_V_1_state(1);
    o_data_V_data_V_1_ack_out <= o_data_TREADY;

    o_data_V_data_V_1_data_out_assign_proc : process(o_data_V_data_V_1_payload_A, o_data_V_data_V_1_payload_B, o_data_V_data_V_1_sel)
    begin
        if ((o_data_V_data_V_1_sel = ap_const_logic_1)) then 
            o_data_V_data_V_1_data_out <= o_data_V_data_V_1_payload_B;
        else 
            o_data_V_data_V_1_data_out <= o_data_V_data_V_1_payload_A;
        end if; 
    end process;

    o_data_V_data_V_1_load_A <= (o_data_V_data_V_1_state_cmp_full and not(o_data_V_data_V_1_sel_wr));
    o_data_V_data_V_1_load_B <= (o_data_V_data_V_1_state_cmp_full and o_data_V_data_V_1_sel_wr);
    o_data_V_data_V_1_sel <= o_data_V_data_V_1_sel_rd;
    o_data_V_data_V_1_state_cmp_full <= '0' when (o_data_V_data_V_1_state = ap_const_lv2_1) else '1';

    o_data_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_tmp_reg_410, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter5_tmp_reg_410 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            o_data_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            o_data_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    o_data_V_data_V_1_vld_out <= o_data_V_data_V_1_state(0);
    o_data_V_last_V_1_ack_in <= o_data_V_last_V_1_state(1);
    o_data_V_last_V_1_ack_out <= o_data_TREADY;

    o_data_V_last_V_1_data_out_assign_proc : process(o_data_V_last_V_1_payload_A, o_data_V_last_V_1_payload_B, o_data_V_last_V_1_sel)
    begin
        if ((o_data_V_last_V_1_sel = ap_const_logic_1)) then 
            o_data_V_last_V_1_data_out <= o_data_V_last_V_1_payload_B;
        else 
            o_data_V_last_V_1_data_out <= o_data_V_last_V_1_payload_A;
        end if; 
    end process;

    o_data_V_last_V_1_load_A <= (o_data_V_last_V_1_state_cmp_full and not(o_data_V_last_V_1_sel_wr));
    o_data_V_last_V_1_load_B <= (o_data_V_last_V_1_state_cmp_full and o_data_V_last_V_1_sel_wr);
    o_data_V_last_V_1_sel <= o_data_V_last_V_1_sel_rd;
    o_data_V_last_V_1_state_cmp_full <= '0' when (o_data_V_last_V_1_state = ap_const_lv2_1) else '1';

    o_data_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_tmp_reg_410, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter5_tmp_reg_410 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            o_data_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            o_data_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    o_data_V_last_V_1_vld_out <= o_data_V_last_V_1_state(0);
    p_Result_5_fu_354_p4 <= grp_fu_396_p3(26 downto 12);
    p_Result_6_fu_363_p4 <= grp_fu_403_p3(26 downto 12);
    p_Result_s_25_fu_372_p5 <= (((p_Result_5_fu_354_p4 & ap_const_lv1_0) & p_Result_6_fu_363_p4) & ap_reg_pp0_iter5_tmp_7_reg_429);
    p_Val2_1_fu_191_p2 <= std_logic_vector(signed(tmp_5_fu_187_p1) + signed(acc_out_V));
    quarter_sin_V_address0 <= tmp_9_fu_223_p1(12 - 1 downto 0);
    quarter_sin_V_address1 <= tmp_s_fu_232_p1(12 - 1 downto 0);

    quarter_sin_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            quarter_sin_V_ce0 <= ap_const_logic_1;
        else 
            quarter_sin_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    quarter_sin_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            quarter_sin_V_ce1 <= ap_const_logic_1;
        else 
            quarter_sin_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(rhs_V_fu_300_p1));
    r_V_2_fu_264_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(rhs_V_1_fu_261_p1));
    r_V_3_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(rhs_V_2_fu_276_p1));
    r_V_4_fu_240_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(rhs_V_3_fu_237_p1));
    r_V_fu_227_p2 <= (p_Result_4_reg_438 xor ap_const_lv12_FFF);
    rhs_V_1_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quarter_sin_V_load_reg_454),13));
    rhs_V_2_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quarter_sin_V_load_1_reg_462),13));
    rhs_V_3_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quarter_sin_V_load_1_reg_462),13));
        rhs_V_4_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter3_p_Result_s_reg_419),28));

        rhs_V_5_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter3_p_Result_1_reg_424),28));

    rhs_V_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quarter_sin_V_load_reg_454),13));
    tmp_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quarter_sin_V_load_1_reg_462),13));
    tmp_2_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quarter_sin_V_load_1_reg_462),13));
    tmp_3_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quarter_sin_V_load_reg_454),13));
        tmp_5_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(FCW_V),40));

    tmp_6_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quarter_sin_V_load_reg_454),13));
    tmp_7_fu_179_p1 <= i_data_TDATA(1 - 1 downto 0);
    tmp_9_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_reg_438),64));
    tmp_nbreadreq_fu_100_p4 <= (0=>(i_data_TVALID), others=>'-');
    tmp_s_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_227_p2),64));
end behav;
