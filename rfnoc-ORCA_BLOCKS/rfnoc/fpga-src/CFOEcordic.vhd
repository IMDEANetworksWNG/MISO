-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CFOEcordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    i_data_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    i_data_V_V_TVALID : IN STD_LOGIC;
    i_data_V_V_TREADY : OUT STD_LOGIC;
    o_data_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    o_data_V_V_TVALID : OUT STD_LOGIC;
    o_data_V_V_TREADY : IN STD_LOGIC;
    n_iter_V : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CFOEcordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CFOEcordic,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k410tffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.685500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=289,HLS_SYN_LUT=500}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal o_data_V_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal o_data_V_V_1_vld_in : STD_LOGIC;
    signal o_data_V_V_1_vld_out : STD_LOGIC;
    signal o_data_V_V_1_ack_in : STD_LOGIC;
    signal o_data_V_V_1_ack_out : STD_LOGIC;
    signal o_data_V_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal o_data_V_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal o_data_V_V_1_sel_rd : STD_LOGIC := '0';
    signal o_data_V_V_1_sel_wr : STD_LOGIC := '0';
    signal o_data_V_V_1_sel : STD_LOGIC;
    signal o_data_V_V_1_load_A : STD_LOGIC;
    signal o_data_V_V_1_load_B : STD_LOGIC;
    signal o_data_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal o_data_V_V_1_state_cmp_full : STD_LOGIC;
    signal qtmp_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal atan_value_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal atan_value_V_ce0 : STD_LOGIC;
    signal atan_value_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_data_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_nbreadreq_fu_96_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_Result_s_fu_166_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_1_fu_232_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_1_reg_447 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_17_fu_238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_load_1_reg_457 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_cast_fu_340_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_349_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_14_reg_478 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_18_fu_371_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_483 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_5_fu_395_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_5_reg_488 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal itmp_V_loc_reg_137 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal idx_reg_146 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_176_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_381_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_186_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal addconv_fu_254_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_297_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_196_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_270_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal addconv1_fu_313_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_fu_78 : STD_LOGIC_VECTOR (22 downto 0);
    signal q_plus_bit_V_loc_fu_82 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_plus_bit_V_loc_fu_86 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal tmp_9_fu_250_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_266_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_309_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_fu_345_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal op2_assign_cast_fu_362_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_365_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_375_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_391_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component CFOEcordic_atan_vbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    atan_value_V_U : component CFOEcordic_atan_vbkb
    generic map (
        DataWidth => 22,
        AddressRange => 22,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => atan_value_V_address0,
        ce0 => atan_value_V_ce0,
        q0 => atan_value_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    o_data_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((o_data_V_V_1_ack_out = ap_const_logic_1) and (o_data_V_V_1_vld_out = ap_const_logic_1))) then 
                                        o_data_V_V_1_sel_rd <= not(o_data_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((o_data_V_V_1_ack_in = ap_const_logic_1) and (o_data_V_V_1_vld_in = ap_const_logic_1))) then 
                                        o_data_V_V_1_sel_wr <= not(o_data_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((o_data_V_V_1_state = ap_const_lv2_2) and (o_data_V_V_1_vld_in = ap_const_logic_0)) or ((o_data_V_V_1_state = ap_const_lv2_3) and (o_data_V_V_1_vld_in = ap_const_logic_0) and (o_data_V_V_1_ack_out = ap_const_logic_1)))) then 
                    o_data_V_V_1_state <= ap_const_lv2_2;
                elsif ((((o_data_V_V_1_state = ap_const_lv2_1) and (o_data_V_V_1_ack_out = ap_const_logic_0)) or ((o_data_V_V_1_state = ap_const_lv2_3) and (o_data_V_V_1_ack_out = ap_const_logic_0) and (o_data_V_V_1_vld_in = ap_const_logic_1)))) then 
                    o_data_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((o_data_V_V_1_vld_in = ap_const_logic_0) and (o_data_V_V_1_ack_out = ap_const_logic_1))) and not(((o_data_V_V_1_ack_out = ap_const_logic_0) and (o_data_V_V_1_vld_in = ap_const_logic_1))) and (o_data_V_V_1_state = ap_const_lv2_3)) or ((o_data_V_V_1_state = ap_const_lv2_1) and (o_data_V_V_1_ack_out = ap_const_logic_1)) or ((o_data_V_V_1_state = ap_const_lv2_2) and (o_data_V_V_1_vld_in = ap_const_logic_1)))) then 
                    o_data_V_V_1_state <= ap_const_lv2_3;
                else 
                    o_data_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    qtmp_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                qtmp_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    qtmp_V <= tmp_19_fu_381_p1;
                elsif ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    qtmp_V <= tmp_7_fu_176_p1;
                end if; 
            end if;
        end if;
    end process;


    i_plus_bit_V_loc_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_238_p3 = ap_const_lv1_1) and (exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
                i_plus_bit_V_loc_fu_86 <= tmp_s_fu_297_p2;
            elsif (((tmp_17_fu_238_p3 = ap_const_lv1_0) and (exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
                i_plus_bit_V_loc_fu_86 <= addconv_fu_254_p2;
            elsif ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_plus_bit_V_loc_fu_86 <= tmp_2_fu_186_p1;
            end if; 
        end if;
    end process;

    idx_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                idx_reg_146 <= idx_1_reg_447;
            elsif ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_reg_146 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    itmp_V_loc_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                itmp_V_loc_reg_137 <= tmp_18_reg_483;
            elsif ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                itmp_V_loc_reg_137 <= i_data_V_V_TDATA(31 downto 16);
            end if; 
        end if;
    end process;

    q_plus_bit_V_loc_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_238_p3 = ap_const_lv1_1) and (exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
                q_plus_bit_V_loc_fu_82 <= addconv1_fu_313_p2;
            elsif (((tmp_17_fu_238_p3 = ap_const_lv1_0) and (exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
                q_plus_bit_V_loc_fu_82 <= tmp_11_fu_270_p2;
            elsif ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                q_plus_bit_V_loc_fu_82 <= tmp_3_fu_196_p1;
            end if; 
        end if;
    end process;

    tmp_V_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_reg_453 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_V_fu_78 <= tmp_5_reg_488;
            elsif (((tmp_17_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_V_fu_78 <= tmp_14_reg_478;
            elsif ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_fu_78 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                idx_1_reg_447 <= idx_1_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((o_data_V_V_1_load_A = ap_const_logic_1)) then
                o_data_V_V_1_payload_A <= tmp_V_cast_fu_340_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((o_data_V_V_1_load_B = ap_const_logic_1)) then
                o_data_V_V_1_payload_B <= tmp_V_cast_fu_340_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_14_reg_478 <= tmp_14_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                tmp_17_reg_453 <= q_plus_bit_V_loc_fu_82(16 downto 16);
                tmp_V_load_1_reg_457 <= tmp_V_fu_78;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_18_reg_483 <= tmp_18_fu_371_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_5_reg_488 <= tmp_5_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_411 <= (0=>i_data_V_V_TVALID, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (i_data_V_V_TVALID, o_data_V_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state1, tmp_nbreadreq_fu_96_p3, ap_CS_fsm_state2, exitcond_fu_227_p2, ap_CS_fsm_state7, ap_block_state2_io, tmp_17_fu_238_p3, ap_block_state7_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_17_fu_238_p3 = ap_const_lv1_1) and (exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((tmp_17_fu_238_p3 = ap_const_lv1_0) and (exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((exitcond_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                if ((not(((ap_const_boolean_1 = ap_block_state7_io) or (o_data_V_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    addconv1_fu_313_p2 <= std_logic_vector(unsigned(q_plus_bit_V_loc_fu_82) + unsigned(tmp_1_fu_309_p1));
    addconv_fu_254_p2 <= std_logic_vector(unsigned(i_plus_bit_V_loc_fu_86) + unsigned(tmp_9_fu_250_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(i_data_V_V_TVALID, tmp_nbreadreq_fu_96_p3)
    begin
                ap_block_state1 <= ((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(o_data_V_V_1_ack_in, exitcond_fu_227_p2)
    begin
                ap_block_state2_io <= ((exitcond_fu_227_p2 = ap_const_lv1_1) and (o_data_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(o_data_V_V_1_ack_in, tmp_reg_411)
    begin
                ap_block_state7_io <= ((tmp_reg_411 = ap_const_lv1_1) and (o_data_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    atan_value_V_address0_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_227_p2, tmp_17_fu_238_p3, tmp_12_fu_282_p1, tmp_8_fu_325_p1)
    begin
        if (((exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
            if ((tmp_17_fu_238_p3 = ap_const_lv1_1)) then 
                atan_value_V_address0 <= tmp_8_fu_325_p1(5 - 1 downto 0);
            elsif ((tmp_17_fu_238_p3 = ap_const_lv1_0)) then 
                atan_value_V_address0 <= tmp_12_fu_282_p1(5 - 1 downto 0);
            else 
                atan_value_V_address0 <= "XXXXX";
            end if;
        else 
            atan_value_V_address0 <= "XXXXX";
        end if; 
    end process;


    atan_value_V_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_227_p2, ap_block_state2_io, tmp_17_fu_238_p3)
    begin
        if ((((tmp_17_fu_238_p3 = ap_const_lv1_1) and (exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io)) or ((tmp_17_fu_238_p3 = ap_const_lv1_0) and (exitcond_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io)))) then 
            atan_value_V_ce0 <= ap_const_logic_1;
        else 
            atan_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_227_p2 <= "1" when (idx_reg_146 = n_iter_V) else "0";

    i_data_V_V_TDATA_blk_n_assign_proc : process(i_data_V_V_TVALID, ap_CS_fsm_state1, tmp_nbreadreq_fu_96_p3)
    begin
        if (((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_data_V_V_TDATA_blk_n <= i_data_V_V_TVALID;
        else 
            i_data_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_data_V_V_TREADY_assign_proc : process(i_data_V_V_TVALID, ap_CS_fsm_state1, tmp_nbreadreq_fu_96_p3)
    begin
        if ((not(((tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (i_data_V_V_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_96_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_data_V_V_TREADY <= ap_const_logic_1;
        else 
            i_data_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    idx_1_fu_232_p2 <= std_logic_vector(unsigned(idx_reg_146) + unsigned(ap_const_lv16_1));
    o_data_V_V_1_ack_in <= o_data_V_V_1_state(1);
    o_data_V_V_1_ack_out <= o_data_V_V_TREADY;

    o_data_V_V_1_data_out_assign_proc : process(o_data_V_V_1_payload_A, o_data_V_V_1_payload_B, o_data_V_V_1_sel)
    begin
        if ((o_data_V_V_1_sel = ap_const_logic_1)) then 
            o_data_V_V_1_data_out <= o_data_V_V_1_payload_B;
        else 
            o_data_V_V_1_data_out <= o_data_V_V_1_payload_A;
        end if; 
    end process;

    o_data_V_V_1_load_A <= (o_data_V_V_1_state_cmp_full and not(o_data_V_V_1_sel_wr));
    o_data_V_V_1_load_B <= (o_data_V_V_1_state_cmp_full and o_data_V_V_1_sel_wr);
    o_data_V_V_1_sel <= o_data_V_V_1_sel_rd;
    o_data_V_V_1_state_cmp_full <= '0' when (o_data_V_V_1_state = ap_const_lv2_1) else '1';

    o_data_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_227_p2, ap_block_state2_io)
    begin
        if (((exitcond_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            o_data_V_V_1_vld_in <= ap_const_logic_1;
        else 
            o_data_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    o_data_V_V_1_vld_out <= o_data_V_V_1_state(0);
    o_data_V_V_TDATA <= o_data_V_V_1_data_out;

    o_data_V_V_TDATA_blk_n_assign_proc : process(o_data_V_V_1_state, ap_CS_fsm_state2, exitcond_fu_227_p2, ap_CS_fsm_state7, tmp_reg_411)
    begin
        if ((((tmp_reg_411 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((exitcond_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            o_data_V_V_TDATA_blk_n <= o_data_V_V_1_state(1);
        else 
            o_data_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_data_V_V_TVALID <= o_data_V_V_1_state(0);
    op2_assign_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_reg_447),17));
    p_Result_s_fu_166_p4 <= i_data_V_V_TDATA(31 downto 16);
        tmp_10_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(itmp_V_loc_reg_137),17));

    tmp_11_fu_270_p2 <= std_logic_vector(unsigned(q_plus_bit_V_loc_fu_82) - unsigned(tmp_10_fu_266_p1));
    tmp_12_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_reg_146),64));
    tmp_13_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(atan_value_V_q0),23));
    tmp_14_fu_349_p2 <= std_logic_vector(unsigned(tmp_V_load_1_reg_457) + unsigned(tmp_13_fu_345_p1));
    tmp_15_fu_365_p2 <= std_logic_vector(shift_right(signed(i_plus_bit_V_loc_fu_86),to_integer(unsigned('0' & op2_assign_cast_fu_362_p1(17-1 downto 0)))));
    tmp_16_fu_375_p2 <= std_logic_vector(shift_right(signed(q_plus_bit_V_loc_fu_82),to_integer(unsigned('0' & op2_assign_cast_fu_362_p1(17-1 downto 0)))));
    tmp_17_fu_238_p3 <= q_plus_bit_V_loc_fu_82(16 downto 16);
    tmp_18_fu_371_p1 <= tmp_15_fu_365_p2(16 - 1 downto 0);
    tmp_19_fu_381_p1 <= tmp_16_fu_375_p2(16 - 1 downto 0);
        tmp_1_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(itmp_V_loc_reg_137),17));

        tmp_2_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_s_fu_166_p4),17));

        tmp_3_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_176_p1),17));

    tmp_4_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(atan_value_V_q0),23));
    tmp_5_fu_395_p2 <= std_logic_vector(unsigned(tmp_V_load_1_reg_457) - unsigned(tmp_4_fu_391_p1));
    tmp_7_fu_176_p1 <= i_data_V_V_TDATA(16 - 1 downto 0);
    tmp_8_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_reg_146),64));
        tmp_9_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(qtmp_V),17));

        tmp_V_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_fu_78),24));

    tmp_nbreadreq_fu_96_p3 <= (0=>i_data_V_V_TVALID, others=>'-');
    tmp_s_fu_297_p2 <= std_logic_vector(unsigned(i_plus_bit_V_loc_fu_86) - unsigned(tmp_9_fu_250_p1));
end behav;
