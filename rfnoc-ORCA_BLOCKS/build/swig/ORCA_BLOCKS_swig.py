# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ORCA_BLOCKS_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ORCA_BLOCKS_swig')
    _ORCA_BLOCKS_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ORCA_BLOCKS_swig', [dirname(__file__)])
        except ImportError:
            import _ORCA_BLOCKS_swig
            return _ORCA_BLOCKS_swig
        try:
            _mod = imp.load_module('_ORCA_BLOCKS_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ORCA_BLOCKS_swig = swig_import_helper()
    del swig_import_helper
else:
    import _ORCA_BLOCKS_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _ORCA_BLOCKS_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _ORCA_BLOCKS_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _ORCA_BLOCKS_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _ORCA_BLOCKS_swig.high_res_timer_epoch()
class device3(object):
    """Proxy of C++ gr::ettus::device3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_device3
    __del__ = lambda self: None

    def get_device(self):
        """get_device(device3 self) -> boost::shared_ptr< ::uhd::device3 >"""
        return _ORCA_BLOCKS_swig.device3_get_device(self)


    def connect(self, *args):
        """
        connect(device3 self, std::string const & block1, size_t src_block_port, std::string const block2, size_t dst_block_port)
        connect(device3 self, std::string const & block1, std::string const block2)
        """
        return _ORCA_BLOCKS_swig.device3_connect(self, *args)


    def make(device_addr):
        """make(::uhd::device_addr_t const & device_addr) -> gr::ettus::device3::sptr"""
        return _ORCA_BLOCKS_swig.device3_make(device_addr)

    make = staticmethod(make)
device3_swigregister = _ORCA_BLOCKS_swig.device3_swigregister
device3_swigregister(device3)

def device3_make(device_addr):
    """device3_make(::uhd::device_addr_t const & device_addr) -> gr::ettus::device3::sptr"""
    return _ORCA_BLOCKS_swig.device3_make(device_addr)

class rfnoc_block(object):
    """Proxy of C++ gr::ettus::rfnoc_block class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def set_register(self, *args):
        """
        set_register(rfnoc_block self, size_t const reg, uint32_t const value, size_t const port=0)
        set_register(rfnoc_block self, std::string const & reg, uint32_t const value, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.rfnoc_block_set_register(self, *args)


    def get_register(self, *args):
        """
        get_register(rfnoc_block self, uint32_t const reg, size_t const port=0) -> uint64_t
        get_register(rfnoc_block self, std::string const & reg, size_t const port=0) -> uint64_t
        """
        return _ORCA_BLOCKS_swig.rfnoc_block_get_register(self, *args)


    def get_block_id(self):
        """get_block_id(rfnoc_block self) -> std::string"""
        return _ORCA_BLOCKS_swig.rfnoc_block_get_block_id(self)


    def set_arg(self, *args):
        """
        set_arg(rfnoc_block self, std::string const & key, int const val, size_t const port=0)
        set_arg(rfnoc_block self, std::string const & key, double const val, size_t const port=0)
        set_arg(rfnoc_block self, std::string const & key, std::string const & val, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.rfnoc_block_set_arg(self, *args)


    def set_command_time(self, time_spec, port=0):
        """set_command_time(rfnoc_block self, uhd::time_spec_t const & time_spec, size_t const port=0)"""
        return _ORCA_BLOCKS_swig.rfnoc_block_set_command_time(self, time_spec, port)


    def get_command_time(self, port=0):
        """get_command_time(rfnoc_block self, size_t const port=0) -> uhd::time_spec_t"""
        return _ORCA_BLOCKS_swig.rfnoc_block_get_command_time(self, port)


    def clear_command_time(self, port):
        """clear_command_time(rfnoc_block self, size_t const port)"""
        return _ORCA_BLOCKS_swig.rfnoc_block_clear_command_time(self, port)


    def set_start_time(self, spec):
        """set_start_time(rfnoc_block self, uhd::time_spec_t const & spec)"""
        return _ORCA_BLOCKS_swig.rfnoc_block_set_start_time(self, spec)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(rfnoc_block self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _ORCA_BLOCKS_swig.rfnoc_block_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def check_topology(self, ninputs, noutputs):
        """check_topology(rfnoc_block self, int ninputs, int noutputs) -> bool"""
        return _ORCA_BLOCKS_swig.rfnoc_block_check_topology(self, ninputs, noutputs)


    def start(self):
        """start(rfnoc_block self) -> bool"""
        return _ORCA_BLOCKS_swig.rfnoc_block_start(self)


    def stop(self):
        """stop(rfnoc_block self) -> bool"""
        return _ORCA_BLOCKS_swig.rfnoc_block_stop(self)

    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_rfnoc_block
    __del__ = lambda self: None
rfnoc_block_swigregister = _ORCA_BLOCKS_swig.rfnoc_block_swigregister
rfnoc_block_swigregister(rfnoc_block)

class rfnoc_block_impl(rfnoc_block):
    """Proxy of C++ gr::ettus::rfnoc_block_impl class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make_block_id(block_name, block_select=-1, device_select=-1):
        """make_block_id(std::string const & block_name, int const block_select=-1, int const device_select=-1) -> std::string"""
        return _ORCA_BLOCKS_swig.rfnoc_block_impl_make_block_id(block_name, block_select, device_select)

    make_block_id = staticmethod(make_block_id)
    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_rfnoc_block_impl
    __del__ = lambda self: None
rfnoc_block_impl_swigregister = _ORCA_BLOCKS_swig.rfnoc_block_impl_swigregister
rfnoc_block_impl_swigregister(rfnoc_block_impl)
cvar = _ORCA_BLOCKS_swig.cvar
EOB_KEY = cvar.EOB_KEY

def rfnoc_block_impl_make_block_id(block_name, block_select=-1, device_select=-1):
    """rfnoc_block_impl_make_block_id(std::string const & block_name, int const block_select=-1, int const device_select=-1) -> std::string"""
    return _ORCA_BLOCKS_swig.rfnoc_block_impl_make_block_id(block_name, block_select, device_select)

class PacketDetector(rfnoc_block):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """
        make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> PacketDetector_sptr

        Return a shared_ptr to a new instance of ORCA_BLOCKS::PacketDetector.

        To avoid accidental use of raw pointers, ORCA_BLOCKS::PacketDetector's constructor is in a private implementation class. ORCA_BLOCKS::PacketDetector::make is the public interface for creating new instances.

        Params: (dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)
        """
        return _ORCA_BLOCKS_swig.PacketDetector_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

    make = staticmethod(make)
    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_PacketDetector
    __del__ = lambda self: None
PacketDetector_swigregister = _ORCA_BLOCKS_swig.PacketDetector_swigregister
PacketDetector_swigregister(PacketDetector)

def PacketDetector_make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
    """
    PacketDetector_make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> PacketDetector_sptr

    Return a shared_ptr to a new instance of ORCA_BLOCKS::PacketDetector.

    To avoid accidental use of raw pointers, ORCA_BLOCKS::PacketDetector's constructor is in a private implementation class. ORCA_BLOCKS::PacketDetector::make is the public interface for creating new instances.

    Params: (dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)
    """
    return _ORCA_BLOCKS_swig.PacketDetector_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

class PacketDetector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ORCA_BLOCKS::PacketDetector)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::PacketDetector)> self) -> PacketDetector_sptr
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::PacketDetector)> self, PacketDetector p) -> PacketDetector_sptr
        """
        this = _ORCA_BLOCKS_swig.new_PacketDetector_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(PacketDetector_sptr self) -> PacketDetector"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr___deref__(self)

    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_PacketDetector_sptr
    __del__ = lambda self: None

    def make(self, dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """
        make(PacketDetector_sptr self, gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> PacketDetector_sptr

        Return a shared_ptr to a new instance of ORCA_BLOCKS::PacketDetector.

        To avoid accidental use of raw pointers, ORCA_BLOCKS::PacketDetector's constructor is in a private implementation class. ORCA_BLOCKS::PacketDetector::make is the public interface for creating new instances.

        Params: (dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_make(self, dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)


    def set_register(self, *args):
        """
        set_register(PacketDetector_sptr self, size_t const reg, uint32_t const value, size_t const port=0)
        set_register(PacketDetector_sptr self, std::string const & reg, uint32_t const value, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_register(self, *args)


    def get_register(self, *args):
        """
        get_register(PacketDetector_sptr self, uint32_t const reg, size_t const port=0) -> uint64_t
        get_register(PacketDetector_sptr self, std::string const & reg, size_t const port=0) -> uint64_t
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_get_register(self, *args)


    def get_block_id(self):
        """get_block_id(PacketDetector_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_get_block_id(self)


    def set_arg(self, *args):
        """
        set_arg(PacketDetector_sptr self, std::string const & key, int const val, size_t const port=0)
        set_arg(PacketDetector_sptr self, std::string const & key, double const val, size_t const port=0)
        set_arg(PacketDetector_sptr self, std::string const & key, std::string const & val, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_arg(self, *args)


    def set_command_time(self, time_spec, port=0):
        """set_command_time(PacketDetector_sptr self, uhd::time_spec_t const & time_spec, size_t const port=0)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_command_time(self, time_spec, port)


    def get_command_time(self, port=0):
        """get_command_time(PacketDetector_sptr self, size_t const port=0) -> uhd::time_spec_t"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_get_command_time(self, port)


    def clear_command_time(self, port):
        """clear_command_time(PacketDetector_sptr self, size_t const port)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_clear_command_time(self, port)


    def set_start_time(self, spec):
        """set_start_time(PacketDetector_sptr self, uhd::time_spec_t const & spec)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_start_time(self, spec)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(PacketDetector_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def check_topology(self, ninputs, noutputs):
        """check_topology(PacketDetector_sptr self, int ninputs, int noutputs) -> bool"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_check_topology(self, ninputs, noutputs)


    def start(self):
        """start(PacketDetector_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_start(self)


    def stop(self):
        """stop(PacketDetector_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_stop(self)


    def history(self):
        """history(PacketDetector_sptr self) -> unsigned int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(PacketDetector_sptr self, int which, int delay)
        declare_sample_delay(PacketDetector_sptr self, unsigned int delay)
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(PacketDetector_sptr self, int which) -> unsigned int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(PacketDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(PacketDetector_sptr self) -> double"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_relative_rate(self)


    def nitems_read(self, which_input):
        """nitems_read(PacketDetector_sptr self, unsigned int which_input) -> uint64_t"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(PacketDetector_sptr self, unsigned int which_output) -> uint64_t"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(PacketDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(PacketDetector_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(PacketDetector_sptr self)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(PacketDetector_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(PacketDetector_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(PacketDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(PacketDetector_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(PacketDetector_sptr self, long max_output_buffer)
        set_max_output_buffer(PacketDetector_sptr self, int port, long max_output_buffer)
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(PacketDetector_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(PacketDetector_sptr self, long min_output_buffer)
        set_min_output_buffer(PacketDetector_sptr self, int port, long min_output_buffer)
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(PacketDetector_sptr self, int which) -> float
        pc_input_buffers_full(PacketDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(PacketDetector_sptr self, int which) -> float
        pc_input_buffers_full_avg(PacketDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(PacketDetector_sptr self, int which) -> float
        pc_input_buffers_full_var(PacketDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(PacketDetector_sptr self, int which) -> float
        pc_output_buffers_full(PacketDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(PacketDetector_sptr self, int which) -> float
        pc_output_buffers_full_avg(PacketDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(PacketDetector_sptr self, int which) -> float
        pc_output_buffers_full_var(PacketDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(PacketDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(PacketDetector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(PacketDetector_sptr self)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(PacketDetector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(PacketDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(PacketDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(PacketDetector_sptr self, int priority) -> int"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(PacketDetector_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_name(self)


    def symbol_name(self):
        """symbol_name(PacketDetector_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(PacketDetector_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(PacketDetector_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(PacketDetector_sptr self) -> long"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(PacketDetector_sptr self) -> basic_block_sptr"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_to_basic_block(self)


    def alias(self):
        """alias(PacketDetector_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(PacketDetector_sptr self, std::string name)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(PacketDetector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(PacketDetector_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(PacketDetector_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(PacketDetector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.PacketDetector_sptr_message_subscribers(self, which_port)

PacketDetector_sptr_swigregister = _ORCA_BLOCKS_swig.PacketDetector_sptr_swigregister
PacketDetector_sptr_swigregister(PacketDetector_sptr)


PacketDetector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
PacketDetector = PacketDetector.make;

class CFOC(rfnoc_block):
    """Proxy of C++ gr::ORCA_BLOCKS::CFOC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> CFOC_sptr"""
        return _ORCA_BLOCKS_swig.CFOC_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

    make = staticmethod(make)
    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_CFOC
    __del__ = lambda self: None
CFOC_swigregister = _ORCA_BLOCKS_swig.CFOC_swigregister
CFOC_swigregister(CFOC)

def CFOC_make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
    """CFOC_make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> CFOC_sptr"""
    return _ORCA_BLOCKS_swig.CFOC_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

class CFOC_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ORCA_BLOCKS::CFOC)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::CFOC)> self) -> CFOC_sptr
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::CFOC)> self, CFOC p) -> CFOC_sptr
        """
        this = _ORCA_BLOCKS_swig.new_CFOC_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(CFOC_sptr self) -> CFOC"""
        return _ORCA_BLOCKS_swig.CFOC_sptr___deref__(self)

    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_CFOC_sptr
    __del__ = lambda self: None

    def make(self, dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """make(CFOC_sptr self, gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> CFOC_sptr"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_make(self, dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)


    def set_register(self, *args):
        """
        set_register(CFOC_sptr self, size_t const reg, uint32_t const value, size_t const port=0)
        set_register(CFOC_sptr self, std::string const & reg, uint32_t const value, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_register(self, *args)


    def get_register(self, *args):
        """
        get_register(CFOC_sptr self, uint32_t const reg, size_t const port=0) -> uint64_t
        get_register(CFOC_sptr self, std::string const & reg, size_t const port=0) -> uint64_t
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_get_register(self, *args)


    def get_block_id(self):
        """get_block_id(CFOC_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_get_block_id(self)


    def set_arg(self, *args):
        """
        set_arg(CFOC_sptr self, std::string const & key, int const val, size_t const port=0)
        set_arg(CFOC_sptr self, std::string const & key, double const val, size_t const port=0)
        set_arg(CFOC_sptr self, std::string const & key, std::string const & val, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_arg(self, *args)


    def set_command_time(self, time_spec, port=0):
        """set_command_time(CFOC_sptr self, uhd::time_spec_t const & time_spec, size_t const port=0)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_command_time(self, time_spec, port)


    def get_command_time(self, port=0):
        """get_command_time(CFOC_sptr self, size_t const port=0) -> uhd::time_spec_t"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_get_command_time(self, port)


    def clear_command_time(self, port):
        """clear_command_time(CFOC_sptr self, size_t const port)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_clear_command_time(self, port)


    def set_start_time(self, spec):
        """set_start_time(CFOC_sptr self, uhd::time_spec_t const & spec)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_start_time(self, spec)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(CFOC_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def check_topology(self, ninputs, noutputs):
        """check_topology(CFOC_sptr self, int ninputs, int noutputs) -> bool"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_check_topology(self, ninputs, noutputs)


    def start(self):
        """start(CFOC_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_start(self)


    def stop(self):
        """stop(CFOC_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_stop(self)


    def history(self):
        """history(CFOC_sptr self) -> unsigned int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(CFOC_sptr self, int which, int delay)
        declare_sample_delay(CFOC_sptr self, unsigned int delay)
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(CFOC_sptr self, int which) -> unsigned int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(CFOC_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(CFOC_sptr self) -> double"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_relative_rate(self)


    def nitems_read(self, which_input):
        """nitems_read(CFOC_sptr self, unsigned int which_input) -> uint64_t"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(CFOC_sptr self, unsigned int which_output) -> uint64_t"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(CFOC_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(CFOC_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(CFOC_sptr self)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(CFOC_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(CFOC_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(CFOC_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(CFOC_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(CFOC_sptr self, long max_output_buffer)
        set_max_output_buffer(CFOC_sptr self, int port, long max_output_buffer)
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(CFOC_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(CFOC_sptr self, long min_output_buffer)
        set_min_output_buffer(CFOC_sptr self, int port, long min_output_buffer)
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(CFOC_sptr self, int which) -> float
        pc_input_buffers_full(CFOC_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(CFOC_sptr self, int which) -> float
        pc_input_buffers_full_avg(CFOC_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(CFOC_sptr self, int which) -> float
        pc_input_buffers_full_var(CFOC_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(CFOC_sptr self, int which) -> float
        pc_output_buffers_full(CFOC_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(CFOC_sptr self, int which) -> float
        pc_output_buffers_full_avg(CFOC_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(CFOC_sptr self, int which) -> float
        pc_output_buffers_full_var(CFOC_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(CFOC_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(CFOC_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(CFOC_sptr self)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(CFOC_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(CFOC_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(CFOC_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(CFOC_sptr self, int priority) -> int"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(CFOC_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_name(self)


    def symbol_name(self):
        """symbol_name(CFOC_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(CFOC_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(CFOC_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(CFOC_sptr self) -> long"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(CFOC_sptr self) -> basic_block_sptr"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_to_basic_block(self)


    def alias(self):
        """alias(CFOC_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(CFOC_sptr self, std::string name)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(CFOC_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ORCA_BLOCKS_swig.CFOC_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(CFOC_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(CFOC_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(CFOC_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.CFOC_sptr_message_subscribers(self, which_port)

CFOC_sptr_swigregister = _ORCA_BLOCKS_swig.CFOC_sptr_swigregister
CFOC_sptr_swigregister(CFOC_sptr)


CFOC_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CFOC = CFOC.make;

class SymbolTiming(rfnoc_block):
    """Proxy of C++ gr::ORCA_BLOCKS::SymbolTiming class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> SymbolTiming_sptr"""
        return _ORCA_BLOCKS_swig.SymbolTiming_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

    make = staticmethod(make)
    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_SymbolTiming
    __del__ = lambda self: None
SymbolTiming_swigregister = _ORCA_BLOCKS_swig.SymbolTiming_swigregister
SymbolTiming_swigregister(SymbolTiming)

def SymbolTiming_make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
    """SymbolTiming_make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> SymbolTiming_sptr"""
    return _ORCA_BLOCKS_swig.SymbolTiming_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

class SymbolTiming_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ORCA_BLOCKS::SymbolTiming)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::SymbolTiming)> self) -> SymbolTiming_sptr
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::SymbolTiming)> self, SymbolTiming p) -> SymbolTiming_sptr
        """
        this = _ORCA_BLOCKS_swig.new_SymbolTiming_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(SymbolTiming_sptr self) -> SymbolTiming"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr___deref__(self)

    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_SymbolTiming_sptr
    __del__ = lambda self: None

    def make(self, dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """make(SymbolTiming_sptr self, gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> SymbolTiming_sptr"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_make(self, dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)


    def set_register(self, *args):
        """
        set_register(SymbolTiming_sptr self, size_t const reg, uint32_t const value, size_t const port=0)
        set_register(SymbolTiming_sptr self, std::string const & reg, uint32_t const value, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_register(self, *args)


    def get_register(self, *args):
        """
        get_register(SymbolTiming_sptr self, uint32_t const reg, size_t const port=0) -> uint64_t
        get_register(SymbolTiming_sptr self, std::string const & reg, size_t const port=0) -> uint64_t
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_get_register(self, *args)


    def get_block_id(self):
        """get_block_id(SymbolTiming_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_get_block_id(self)


    def set_arg(self, *args):
        """
        set_arg(SymbolTiming_sptr self, std::string const & key, int const val, size_t const port=0)
        set_arg(SymbolTiming_sptr self, std::string const & key, double const val, size_t const port=0)
        set_arg(SymbolTiming_sptr self, std::string const & key, std::string const & val, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_arg(self, *args)


    def set_command_time(self, time_spec, port=0):
        """set_command_time(SymbolTiming_sptr self, uhd::time_spec_t const & time_spec, size_t const port=0)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_command_time(self, time_spec, port)


    def get_command_time(self, port=0):
        """get_command_time(SymbolTiming_sptr self, size_t const port=0) -> uhd::time_spec_t"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_get_command_time(self, port)


    def clear_command_time(self, port):
        """clear_command_time(SymbolTiming_sptr self, size_t const port)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_clear_command_time(self, port)


    def set_start_time(self, spec):
        """set_start_time(SymbolTiming_sptr self, uhd::time_spec_t const & spec)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_start_time(self, spec)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(SymbolTiming_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def check_topology(self, ninputs, noutputs):
        """check_topology(SymbolTiming_sptr self, int ninputs, int noutputs) -> bool"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_check_topology(self, ninputs, noutputs)


    def start(self):
        """start(SymbolTiming_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_start(self)


    def stop(self):
        """stop(SymbolTiming_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_stop(self)


    def history(self):
        """history(SymbolTiming_sptr self) -> unsigned int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(SymbolTiming_sptr self, int which, int delay)
        declare_sample_delay(SymbolTiming_sptr self, unsigned int delay)
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(SymbolTiming_sptr self, int which) -> unsigned int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(SymbolTiming_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(SymbolTiming_sptr self) -> double"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_relative_rate(self)


    def nitems_read(self, which_input):
        """nitems_read(SymbolTiming_sptr self, unsigned int which_input) -> uint64_t"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(SymbolTiming_sptr self, unsigned int which_output) -> uint64_t"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(SymbolTiming_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(SymbolTiming_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(SymbolTiming_sptr self)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(SymbolTiming_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(SymbolTiming_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(SymbolTiming_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(SymbolTiming_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(SymbolTiming_sptr self, long max_output_buffer)
        set_max_output_buffer(SymbolTiming_sptr self, int port, long max_output_buffer)
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(SymbolTiming_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(SymbolTiming_sptr self, long min_output_buffer)
        set_min_output_buffer(SymbolTiming_sptr self, int port, long min_output_buffer)
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(SymbolTiming_sptr self, int which) -> float
        pc_input_buffers_full(SymbolTiming_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(SymbolTiming_sptr self, int which) -> float
        pc_input_buffers_full_avg(SymbolTiming_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(SymbolTiming_sptr self, int which) -> float
        pc_input_buffers_full_var(SymbolTiming_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(SymbolTiming_sptr self, int which) -> float
        pc_output_buffers_full(SymbolTiming_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(SymbolTiming_sptr self, int which) -> float
        pc_output_buffers_full_avg(SymbolTiming_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(SymbolTiming_sptr self, int which) -> float
        pc_output_buffers_full_var(SymbolTiming_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(SymbolTiming_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(SymbolTiming_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(SymbolTiming_sptr self)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(SymbolTiming_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(SymbolTiming_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(SymbolTiming_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(SymbolTiming_sptr self, int priority) -> int"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(SymbolTiming_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_name(self)


    def symbol_name(self):
        """symbol_name(SymbolTiming_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(SymbolTiming_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(SymbolTiming_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(SymbolTiming_sptr self) -> long"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(SymbolTiming_sptr self) -> basic_block_sptr"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_to_basic_block(self)


    def alias(self):
        """alias(SymbolTiming_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(SymbolTiming_sptr self, std::string name)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(SymbolTiming_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(SymbolTiming_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(SymbolTiming_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(SymbolTiming_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.SymbolTiming_sptr_message_subscribers(self, which_port)

SymbolTiming_sptr_swigregister = _ORCA_BLOCKS_swig.SymbolTiming_sptr_swigregister
SymbolTiming_sptr_swigregister(SymbolTiming_sptr)


SymbolTiming_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
SymbolTiming = SymbolTiming.make;

class BoundaryDetector(rfnoc_block):
    """Proxy of C++ gr::ORCA_BLOCKS::BoundaryDetector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> BoundaryDetector_sptr"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

    make = staticmethod(make)
    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_BoundaryDetector
    __del__ = lambda self: None
BoundaryDetector_swigregister = _ORCA_BLOCKS_swig.BoundaryDetector_swigregister
BoundaryDetector_swigregister(BoundaryDetector)

def BoundaryDetector_make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
    """BoundaryDetector_make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> BoundaryDetector_sptr"""
    return _ORCA_BLOCKS_swig.BoundaryDetector_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

class BoundaryDetector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ORCA_BLOCKS::BoundaryDetector)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::BoundaryDetector)> self) -> BoundaryDetector_sptr
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::BoundaryDetector)> self, BoundaryDetector p) -> BoundaryDetector_sptr
        """
        this = _ORCA_BLOCKS_swig.new_BoundaryDetector_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(BoundaryDetector_sptr self) -> BoundaryDetector"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr___deref__(self)

    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_BoundaryDetector_sptr
    __del__ = lambda self: None

    def make(self, dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """make(BoundaryDetector_sptr self, gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> BoundaryDetector_sptr"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_make(self, dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)


    def set_register(self, *args):
        """
        set_register(BoundaryDetector_sptr self, size_t const reg, uint32_t const value, size_t const port=0)
        set_register(BoundaryDetector_sptr self, std::string const & reg, uint32_t const value, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_register(self, *args)


    def get_register(self, *args):
        """
        get_register(BoundaryDetector_sptr self, uint32_t const reg, size_t const port=0) -> uint64_t
        get_register(BoundaryDetector_sptr self, std::string const & reg, size_t const port=0) -> uint64_t
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_get_register(self, *args)


    def get_block_id(self):
        """get_block_id(BoundaryDetector_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_get_block_id(self)


    def set_arg(self, *args):
        """
        set_arg(BoundaryDetector_sptr self, std::string const & key, int const val, size_t const port=0)
        set_arg(BoundaryDetector_sptr self, std::string const & key, double const val, size_t const port=0)
        set_arg(BoundaryDetector_sptr self, std::string const & key, std::string const & val, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_arg(self, *args)


    def set_command_time(self, time_spec, port=0):
        """set_command_time(BoundaryDetector_sptr self, uhd::time_spec_t const & time_spec, size_t const port=0)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_command_time(self, time_spec, port)


    def get_command_time(self, port=0):
        """get_command_time(BoundaryDetector_sptr self, size_t const port=0) -> uhd::time_spec_t"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_get_command_time(self, port)


    def clear_command_time(self, port):
        """clear_command_time(BoundaryDetector_sptr self, size_t const port)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_clear_command_time(self, port)


    def set_start_time(self, spec):
        """set_start_time(BoundaryDetector_sptr self, uhd::time_spec_t const & spec)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_start_time(self, spec)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(BoundaryDetector_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def check_topology(self, ninputs, noutputs):
        """check_topology(BoundaryDetector_sptr self, int ninputs, int noutputs) -> bool"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_check_topology(self, ninputs, noutputs)


    def start(self):
        """start(BoundaryDetector_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_start(self)


    def stop(self):
        """stop(BoundaryDetector_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_stop(self)


    def history(self):
        """history(BoundaryDetector_sptr self) -> unsigned int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(BoundaryDetector_sptr self, int which, int delay)
        declare_sample_delay(BoundaryDetector_sptr self, unsigned int delay)
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(BoundaryDetector_sptr self, int which) -> unsigned int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(BoundaryDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(BoundaryDetector_sptr self) -> double"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_relative_rate(self)


    def nitems_read(self, which_input):
        """nitems_read(BoundaryDetector_sptr self, unsigned int which_input) -> uint64_t"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(BoundaryDetector_sptr self, unsigned int which_output) -> uint64_t"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(BoundaryDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(BoundaryDetector_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(BoundaryDetector_sptr self)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(BoundaryDetector_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(BoundaryDetector_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(BoundaryDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(BoundaryDetector_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(BoundaryDetector_sptr self, long max_output_buffer)
        set_max_output_buffer(BoundaryDetector_sptr self, int port, long max_output_buffer)
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(BoundaryDetector_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(BoundaryDetector_sptr self, long min_output_buffer)
        set_min_output_buffer(BoundaryDetector_sptr self, int port, long min_output_buffer)
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(BoundaryDetector_sptr self, int which) -> float
        pc_input_buffers_full(BoundaryDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(BoundaryDetector_sptr self, int which) -> float
        pc_input_buffers_full_avg(BoundaryDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(BoundaryDetector_sptr self, int which) -> float
        pc_input_buffers_full_var(BoundaryDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(BoundaryDetector_sptr self, int which) -> float
        pc_output_buffers_full(BoundaryDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(BoundaryDetector_sptr self, int which) -> float
        pc_output_buffers_full_avg(BoundaryDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(BoundaryDetector_sptr self, int which) -> float
        pc_output_buffers_full_var(BoundaryDetector_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(BoundaryDetector_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(BoundaryDetector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(BoundaryDetector_sptr self)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(BoundaryDetector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(BoundaryDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(BoundaryDetector_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(BoundaryDetector_sptr self, int priority) -> int"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(BoundaryDetector_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_name(self)


    def symbol_name(self):
        """symbol_name(BoundaryDetector_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(BoundaryDetector_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(BoundaryDetector_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(BoundaryDetector_sptr self) -> long"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(BoundaryDetector_sptr self) -> basic_block_sptr"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_to_basic_block(self)


    def alias(self):
        """alias(BoundaryDetector_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(BoundaryDetector_sptr self, std::string name)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(BoundaryDetector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(BoundaryDetector_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(BoundaryDetector_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(BoundaryDetector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.BoundaryDetector_sptr_message_subscribers(self, which_port)

BoundaryDetector_sptr_swigregister = _ORCA_BLOCKS_swig.BoundaryDetector_sptr_swigregister
BoundaryDetector_sptr_swigregister(BoundaryDetector_sptr)


BoundaryDetector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
BoundaryDetector = BoundaryDetector.make;

class CIR(rfnoc_block):
    """Proxy of C++ gr::ORCA_BLOCKS::CIR class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> CIR_sptr"""
        return _ORCA_BLOCKS_swig.CIR_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

    make = staticmethod(make)
    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_CIR
    __del__ = lambda self: None
CIR_swigregister = _ORCA_BLOCKS_swig.CIR_swigregister
CIR_swigregister(CIR)

def CIR_make(dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
    """CIR_make(gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> CIR_sptr"""
    return _ORCA_BLOCKS_swig.CIR_make(dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)

class CIR_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ORCA_BLOCKS::CIR)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::CIR)> self) -> CIR_sptr
        __init__(boost::shared_ptr<(gr::ORCA_BLOCKS::CIR)> self, CIR p) -> CIR_sptr
        """
        this = _ORCA_BLOCKS_swig.new_CIR_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(CIR_sptr self) -> CIR"""
        return _ORCA_BLOCKS_swig.CIR_sptr___deref__(self)

    __swig_destroy__ = _ORCA_BLOCKS_swig.delete_CIR_sptr
    __del__ = lambda self: None

    def make(self, dev, tx_stream_args, rx_stream_args, block_select=-1, device_select=-1, enable_eob_on_stop=True):
        """make(CIR_sptr self, gr::ettus::device3::sptr const & dev, ::uhd::stream_args_t const & tx_stream_args, ::uhd::stream_args_t const & rx_stream_args, int const block_select=-1, int const device_select=-1, bool const enable_eob_on_stop=True) -> CIR_sptr"""
        return _ORCA_BLOCKS_swig.CIR_sptr_make(self, dev, tx_stream_args, rx_stream_args, block_select, device_select, enable_eob_on_stop)


    def set_register(self, *args):
        """
        set_register(CIR_sptr self, size_t const reg, uint32_t const value, size_t const port=0)
        set_register(CIR_sptr self, std::string const & reg, uint32_t const value, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_set_register(self, *args)


    def get_register(self, *args):
        """
        get_register(CIR_sptr self, uint32_t const reg, size_t const port=0) -> uint64_t
        get_register(CIR_sptr self, std::string const & reg, size_t const port=0) -> uint64_t
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_get_register(self, *args)


    def get_block_id(self):
        """get_block_id(CIR_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.CIR_sptr_get_block_id(self)


    def set_arg(self, *args):
        """
        set_arg(CIR_sptr self, std::string const & key, int const val, size_t const port=0)
        set_arg(CIR_sptr self, std::string const & key, double const val, size_t const port=0)
        set_arg(CIR_sptr self, std::string const & key, std::string const & val, size_t const port=0)
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_set_arg(self, *args)


    def set_command_time(self, time_spec, port=0):
        """set_command_time(CIR_sptr self, uhd::time_spec_t const & time_spec, size_t const port=0)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_set_command_time(self, time_spec, port)


    def get_command_time(self, port=0):
        """get_command_time(CIR_sptr self, size_t const port=0) -> uhd::time_spec_t"""
        return _ORCA_BLOCKS_swig.CIR_sptr_get_command_time(self, port)


    def clear_command_time(self, port):
        """clear_command_time(CIR_sptr self, size_t const port)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_clear_command_time(self, port)


    def set_start_time(self, spec):
        """set_start_time(CIR_sptr self, uhd::time_spec_t const & spec)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_set_start_time(self, spec)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(CIR_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def check_topology(self, ninputs, noutputs):
        """check_topology(CIR_sptr self, int ninputs, int noutputs) -> bool"""
        return _ORCA_BLOCKS_swig.CIR_sptr_check_topology(self, ninputs, noutputs)


    def start(self):
        """start(CIR_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.CIR_sptr_start(self)


    def stop(self):
        """stop(CIR_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.CIR_sptr_stop(self)


    def history(self):
        """history(CIR_sptr self) -> unsigned int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(CIR_sptr self, int which, int delay)
        declare_sample_delay(CIR_sptr self, unsigned int delay)
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(CIR_sptr self, int which) -> unsigned int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(CIR_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(CIR_sptr self) -> double"""
        return _ORCA_BLOCKS_swig.CIR_sptr_relative_rate(self)


    def nitems_read(self, which_input):
        """nitems_read(CIR_sptr self, unsigned int which_input) -> uint64_t"""
        return _ORCA_BLOCKS_swig.CIR_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(CIR_sptr self, unsigned int which_output) -> uint64_t"""
        return _ORCA_BLOCKS_swig.CIR_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(CIR_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(CIR_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(CIR_sptr self)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(CIR_sptr self) -> bool"""
        return _ORCA_BLOCKS_swig.CIR_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(CIR_sptr self, int m)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(CIR_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(CIR_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.CIR_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(CIR_sptr self, long max_output_buffer)
        set_max_output_buffer(CIR_sptr self, int port, long max_output_buffer)
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(CIR_sptr self, int i) -> long"""
        return _ORCA_BLOCKS_swig.CIR_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(CIR_sptr self, long min_output_buffer)
        set_min_output_buffer(CIR_sptr self, int port, long min_output_buffer)
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(CIR_sptr self, int which) -> float
        pc_input_buffers_full(CIR_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(CIR_sptr self, int which) -> float
        pc_input_buffers_full_avg(CIR_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(CIR_sptr self, int which) -> float
        pc_input_buffers_full_var(CIR_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(CIR_sptr self, int which) -> float
        pc_output_buffers_full(CIR_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(CIR_sptr self, int which) -> float
        pc_output_buffers_full_avg(CIR_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(CIR_sptr self, int which) -> float
        pc_output_buffers_full_var(CIR_sptr self) -> pmt_vector_float
        """
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(CIR_sptr self) -> float"""
        return _ORCA_BLOCKS_swig.CIR_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(CIR_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(CIR_sptr self)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(CIR_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ORCA_BLOCKS_swig.CIR_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(CIR_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(CIR_sptr self) -> int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(CIR_sptr self, int priority) -> int"""
        return _ORCA_BLOCKS_swig.CIR_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(CIR_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.CIR_sptr_name(self)


    def symbol_name(self):
        """symbol_name(CIR_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.CIR_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(CIR_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.CIR_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(CIR_sptr self) -> io_signature_sptr"""
        return _ORCA_BLOCKS_swig.CIR_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(CIR_sptr self) -> long"""
        return _ORCA_BLOCKS_swig.CIR_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(CIR_sptr self) -> basic_block_sptr"""
        return _ORCA_BLOCKS_swig.CIR_sptr_to_basic_block(self)


    def alias(self):
        """alias(CIR_sptr self) -> std::string"""
        return _ORCA_BLOCKS_swig.CIR_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(CIR_sptr self, std::string name)"""
        return _ORCA_BLOCKS_swig.CIR_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(CIR_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ORCA_BLOCKS_swig.CIR_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(CIR_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.CIR_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(CIR_sptr self) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.CIR_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(CIR_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ORCA_BLOCKS_swig.CIR_sptr_message_subscribers(self, which_port)

CIR_sptr_swigregister = _ORCA_BLOCKS_swig.CIR_sptr_swigregister
CIR_sptr_swigregister(CIR_sptr)


CIR_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
CIR = CIR.make;



